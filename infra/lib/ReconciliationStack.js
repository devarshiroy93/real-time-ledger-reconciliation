"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReconciliationStack = void 0;
const cdk = require("aws-cdk-lib");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
const lambda = require("aws-cdk-lib/aws-lambda");
const path = require("path");
const apigateway = require("aws-cdk-lib/aws-apigateway");
const lambdaNodejs = require("aws-cdk-lib/aws-lambda-nodejs");
const sources = require("aws-cdk-lib/aws-lambda-event-sources");
class ReconciliationStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // 1. Customer Ledger (simple: txId only)
        const customerLedger = new dynamodb.Table(this, "CustomerLedger", {
            partitionKey: { name: "txId", type: dynamodb.AttributeType.STRING },
            billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
            stream: dynamodb.StreamViewType.NEW_AND_OLD_IMAGES,
            tableName: "ReconStack-CustomerLedger",
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        // 2. Processor Ledger (txId + timestamp, since multiple entries possible)
        const processorLedger = new dynamodb.Table(this, "ProcessorLedger", {
            partitionKey: { name: "txId", type: dynamodb.AttributeType.STRING },
            sortKey: { name: "timestamp", type: dynamodb.AttributeType.STRING },
            billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
            stream: dynamodb.StreamViewType.NEW_AND_OLD_IMAGES,
            tableName: "ReconStack-ProcessorLedger",
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        // 3. Core Ledger (txId + timestamp, similar reasoning as processor)
        const coreLedger = new dynamodb.Table(this, "CoreLedger", {
            partitionKey: { name: "txId", type: dynamodb.AttributeType.STRING },
            sortKey: { name: "timestamp", type: dynamodb.AttributeType.STRING },
            billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
            stream: dynamodb.StreamViewType.NEW_AND_OLD_IMAGES,
            tableName: "ReconStack-CoreLedger",
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        // 4. Reconciliation Findings (latest status only, one row per txId)
        const reconciliationFindings = new dynamodb.Table(this, "ReconciliationFindings", {
            partitionKey: { name: "txId", type: dynamodb.AttributeType.STRING },
            billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
            tableName: "ReconStack-ReconciliationFindingsV2",
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        // 5. Daily Summary (date = PK)
        new dynamodb.Table(this, "DailySummary", {
            partitionKey: { name: "date", type: dynamodb.AttributeType.STRING },
            billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
            tableName: "ReconStack-DailySummary",
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        // 6. Reconciliation Audit (full lifecycle, append-only)
        const reconciliationAudit = new dynamodb.Table(this, "ReconciliationAudit", {
            partitionKey: { name: "txId", type: dynamodb.AttributeType.STRING },
            sortKey: { name: "eventTimestamp", type: dynamodb.AttributeType.STRING },
            billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
            tableName: "ReconStack-ReconciliationAudit",
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        // ---- Lambdas ----
        const submitTransactionLambda = new lambdaNodejs.NodejsFunction(this, "ReconStackSubmitTransactionLambda", {
            runtime: lambda.Runtime.NODEJS_18_X,
            entry: path.join(__dirname, "../../lambdas/submit-transaction/index.ts"),
            handler: "handler",
            environment: {
                CUSTOMER_LEDGER_TABLE: customerLedger.tableName,
            },
        });
        customerLedger.grantWriteData(submitTransactionLambda);
        const processorSimulatorLambda = new lambdaNodejs.NodejsFunction(this, "ReconStackProcessorSimulatorLambda", {
            runtime: lambda.Runtime.NODEJS_18_X,
            entry: path.join(__dirname, "../../lambdas/processor-simulator/index.ts"),
            handler: "handler",
            environment: {
                PROCESSOR_LEDGER_TABLE: processorLedger.tableName,
            },
        });
        processorLedger.grantWriteData(processorSimulatorLambda);
        const coreSimulatorLambda = new lambdaNodejs.NodejsFunction(this, "ReconStackCoreSimulatorLambda", {
            runtime: lambda.Runtime.NODEJS_18_X,
            entry: path.join(__dirname, "../../lambdas/core-simulator/index.ts"),
            handler: "handler",
            environment: {
                CORE_LEDGER_TABLE: coreLedger.tableName,
            },
        });
        coreLedger.grantWriteData(coreSimulatorLambda);
        const reconciliationFn = new lambdaNodejs.NodejsFunction(this, "ReconStackReconciliationEngineLambda", {
            runtime: lambda.Runtime.NODEJS_18_X,
            entry: path.join(__dirname, "../../lambdas/reconciliation-engine/index.ts"),
            handler: "handler",
            environment: {
                CUSTOMER_LEDGER_TABLE: customerLedger.tableName,
                PROCESSOR_LEDGER_TABLE: processorLedger.tableName,
                CORE_LEDGER_TABLE: coreLedger.tableName,
                FINDINGS_TABLE: reconciliationFindings.tableName,
                AUDIT_TABLE: reconciliationAudit.tableName,
            },
        });
        customerLedger.grantReadWriteData(reconciliationFn);
        processorLedger.grantReadData(reconciliationFn);
        coreLedger.grantReadData(reconciliationFn);
        reconciliationFindings.grantReadWriteData(reconciliationFn);
        reconciliationAudit.grantWriteData(reconciliationFn);
        reconciliationFn.addEventSource(new sources.DynamoEventSource(customerLedger, { startingPosition: lambda.StartingPosition.LATEST }));
        reconciliationFn.addEventSource(new sources.DynamoEventSource(processorLedger, { startingPosition: lambda.StartingPosition.LATEST }));
        reconciliationFn.addEventSource(new sources.DynamoEventSource(coreLedger, { startingPosition: lambda.StartingPosition.LATEST }));
        // ---- API Gateway ----
        const api = new apigateway.RestApi(this, "ReconciliationApi", {
            restApiName: "Reconciliation Service",
            description: "APIs for ledger reconciliation demo",
        });
        // API Key + Usage Plan
        const apiKey = api.addApiKey("ReconciliationApiKey", {
            apiKeyName: "ReconDemoKey",
            description: "API Key for Reconciliation POC",
        });
        const plan = api.addUsagePlan("ReconciliationUsagePlan", {
            name: "ReconUsagePlan",
            description: "Limit to 1 req/sec and 100 req/day",
            throttle: {
                rateLimit: 1,
                burstLimit: 1,
            },
            quota: {
                limit: 100,
                period: apigateway.Period.DAY,
            },
        });
        plan.addApiStage({ stage: api.deploymentStage });
        plan.addApiKey(apiKey);
        // Endpoints with API key required
        const transactionResource = api.root.addResource("transaction");
        transactionResource.addMethod("POST", new apigateway.LambdaIntegration(submitTransactionLambda), {
            apiKeyRequired: true,
        });
        const simulateResource = api.root.addResource("simulate");
        const processorResource = simulateResource.addResource("processor");
        processorResource.addMethod("POST", new apigateway.LambdaIntegration(processorSimulatorLambda), {
            apiKeyRequired: true,
        });
        const coreResource = simulateResource.addResource("core");
        coreResource.addMethod("POST", new apigateway.LambdaIntegration(coreSimulatorLambda), {
            apiKeyRequired: true,
        });
        //these are to support the UI .
        // GET /findings
        const getFindingsLambda = new lambdaNodejs.NodejsFunction(this, "ReconStackGetFindingsLambda", {
            runtime: lambda.Runtime.NODEJS_18_X,
            entry: path.join(__dirname, "../../lambdas/get-findings/index.ts"),
            handler: "handler",
            environment: {
                FINDINGS_TABLE: reconciliationFindings.tableName,
            },
        });
        reconciliationFindings.grantReadData(getFindingsLambda);
        const findingsResource = api.root.addResource("findings");
        findingsResource.addMethod("GET", new apigateway.LambdaIntegration(getFindingsLambda), {
            apiKeyRequired: true,
        });
        // GET /audit/{txId}
        const getAuditLambda = new lambdaNodejs.NodejsFunction(this, "ReconStackGetAuditLambda", {
            runtime: lambda.Runtime.NODEJS_18_X,
            entry: path.join(__dirname, "../../lambdas/get-audit/index.ts"),
            handler: "handler",
            environment: {
                AUDIT_TABLE: reconciliationAudit.tableName,
            },
        });
        reconciliationAudit.grantReadData(getAuditLambda);
        const auditResource = api.root.addResource("audit");
        const auditById = auditResource.addResource("{txId}");
        auditById.addMethod("GET", new apigateway.LambdaIntegration(getAuditLambda), {
            apiKeyRequired: true,
        });
    }
}
exports.ReconciliationStack = ReconciliationStack;
//# sourceMappingURL=data:application/json;base64,